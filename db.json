{
  "notes": [
    {
      "id": "1",
      "title": "Vue.js",
      "body": "DAY 1\nProject Structure:\n- index.html, root where the browser going to read\n- id=\"app\", wrapper of the vue or considered as root\n- src folder, brain of the vue application\n- App.vue, root component\n\nReactivity:\n- import { ref and reactive } // for reactivity\n\n\nDAY 2\nV-FOR:\n- always put unique key when using v-for :key=\"post.id\"\n\nSingle File Component:\n- import PostItem from '@/components/PostItem.vue' \n- defineProps(), like @props() in blade\n- <PostItem :post=\"post\" /> , to pass the data from parent component to child\n- <script setup> , for simplicity\n\nVue Router:\n- in router/index.js directory import the view component from views folder\n    import PostCreate from '@/views/PostCreate.vue'\n- set up the route\n    {\n      path: '/posts/create',\n      name: 'posts.create',\n      component: PostCreate\n    },\n- in App.vue use <RouterLink to=\"/posts/create\">Create Post</RouterLink> to create a link\n- <RouterView /> , renders the component from views folder\n\nV-MODEL:\n- v-model , two way binding\n- to make the variable reactive\n    import { reactive } from 'vue'\n    const post = reactive({\n        title: '',\n        body: ''\n    })\n- computed (returns something) in options api\n    import { reactive, computed } from 'vue'\n    const isFormInvalid = computed(() => {\n        return post.title === '' || post.body === ''\n    })\n    <button :disabled=\"isFormInvalid\" class=\"mt-1 btn btn-neutral\">Add</button>\n\n\nDAY 3\nEmit events:\n- emit , custom event listener\n- from child to parent component communication\n- defineEmits([]) , takes an array of custom emits or events\n\nPinia (State Management):\n- stores folder\n- separate the data and logic\n\nPinia Actions (Create):\n- in stores/posts create an action \n- in PostCreate view , \n    import { usePostsStore } from '@/stores/posts'\n    import { useRouter } from 'vue-router'\n\n    const router = useRouter()\n    const postStore = usePostsStore()\n\n    const submit = () => {\n        // usePostsStore().addPosts(post)\n        postStore.addPosts(post)\n        router.push({ name: 'home' })\n    }\n\nPinia Getters:\n- getters: same as computed\n\nUsing JSON-Server to save the state:\n- npm install json-server\n- create db.json in root directory\n- move the post (array of objects) to db.json\n- to run json server run this command , npx json-server db.json -w\n- fetch the data\n    getPost() {\n      fetch('http://localhost:3000/posts')\n        .then((res) => res.json())\n        .then((data) => (this.posts = data))\n    },",
      "author": "Carl Joseph",
      "created_at": "September 4, 2024",
      "is_expanded": false,
      "is_saved": false,
      "is_trash": false
    },
    {
      "id": "2",
      "title": "Infinityfree",
      "body": "Deployment:\n- composer install --optimize-autoloader --no-dev\n\n- php artisan key:generate\n\n- npm run build\n\nphp artisan config:cache\nphp artisan cache:clear\nphp artisan view:clear\n\n- go to infinityfree > create account > create now > choose subdomain > email consent(I approved) > create account > finish > control panel > approve\n\n- filezilla > put the host, username and password of infinityfree to filezilla > quickconnect\n\n- .env > change the DB_HOST, DB_USERNAME, DB_PASSWORD and APP_ENV from local to production\n\n- infinityfree accounts tab > mysqldatabases > create database > add datbase name > copy database name > put in DB_DATABASE in .env\n\n- go to filezilla > inside htdocs folder upload the folder of your project\n\n- after the uploading is finished > inside htdocs create new file named .htaccess\n\n- edit .htaccess and put\n<IfModule mod_rewrite.c>\n    RewriteEngine On\n    RewriteRule ^(.*)$ /project-name/public/$1 [L]\n</IfModule>\n\n- control panel > alter php config > on\n\n- export the project's database as sql > go to mysqldatabases in infinityfree > phpMyAdmin > import > choose the sql file > go > it must be successfully imported\n\n\n\nFree SSL Certificates:\n- go to Free SSL Certificates tab > New SSL Certificate > put the domain name (without http:// and /) > create order > Setup CNAME Records\n- wait until its ready > request certificate > install ssl certificate automatically > the status should \"ssl certificate is active\"\n- to force the laravel app to https go to laravel project > app > providers > AppServiceProvider.php > inside boot function add \\URL::forceScheme('https'); > upload the AppServiceProvider.php in infinityfree using filezilla or simply add this \\URL::forceScheme('https'); using filemanager in infinityfree",
      "author": "Carl Joseph",
      "created_at": "September 4, 2024",
      "is_expanded": false,
      "is_saved": false,
      "is_trash": false
    },
    {
      "id": "3",
      "title": "Non totam proident ",
      "body": "Cupidatat et laborum",
      "author": "Carl Joseph",
      "created_at": "September 9, 2024",
      "is_expanded": false,
      "is_saved": false,
      "is_trash": false
    }
  ]
}
